'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _noImportant = require('aphrodite/no-important');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var baseStyles = {
  transition: {
    transition: 'transform 180ms linear'
  },
  layer: {
    width: '100%',
    height: '100%',
    position: 'absolute',
    top: 0,
    left: 0,
    bottom: 0,
    right: 0
  }
};

var styles = _noImportant.StyleSheet.create({
  parallaxHover__outter: _extends({
    transform: 'perspective(1000px)',
    transformStyle: 'preserve-3d',
    backfaceVisibility: 'visible',
    position: 'relative',
    overflow: 'visible'
  }, baseStyles.transition),
  parallaxHover__container: {},
  parallaxHover__shadow: _extends({
    position: 'absolute',
    width: '80%',
    height: '80%',
    left: '10%',
    top: '10%'
  }, baseStyles.transition),
  parallaxHover__layer: _extends({
    overflow: 'hidden'
  }, baseStyles.layer, baseStyles.transition),
  parallaxHover__lighting: _extends({}, baseStyles.layer, baseStyles.transition)
});

var initialState = {
  rotateX: 0,
  rotateY: 0,
  scale: 1,
  shine: 0,
  isHovered: false
};

var ParallaxHover = function (_Component) {
  _inherits(ParallaxHover, _Component);

  function ParallaxHover(props) {
    _classCallCheck(this, ParallaxHover);

    var _this = _possibleConstructorReturn(this, (ParallaxHover.__proto__ || Object.getPrototypeOf(ParallaxHover)).call(this, props));

    _this.handleParallaxBegin = function () {
      _this.setState({
        isHovered: true,
        shine: _this.props.shine
      });
    };

    _this.handleParallaxEnd = function () {
      _this.setState(initialState);
    };

    _this.handleParallaxMove = function (_ref) {
      var pageX = _ref.pageX,
          pageY = _ref.pageY;
      var _this$props = _this.props,
          width = _this$props.width,
          height = _this$props.height,
          rotation = _this$props.rotation,
          scale = _this$props.scale;
      var _window = window,
          scrollTop = _window.scrollY,
          scrollLeft = _window.scrollX;


      if (!_this.state.isHovered) _this.setState({ isHovered: true });

      var bounds = _this.wrapper.getBoundingClientRect();
      var centerX = width / 2;
      var centerY = height / 2;

      var widthMultiplier = 360 / width;
      var offsetX = (pageX - bounds.left - scrollLeft) / width;
      var offsetY = (pageY - bounds.top - scrollTop) / height;
      var deltaX = pageX - bounds.left - scrollLeft - centerX;
      var deltaY = pageY - bounds.top - scrollTop - centerY;

      var rotateX = (deltaY - offsetY) * (rotation / 100 * widthMultiplier);
      var rotateY = (offsetX - deltaX) * (rotation / 100 * widthMultiplier);

      var angleRad = Math.atan2(deltaY, deltaX);
      var angleRaw = angleRad * 180 / Math.PI - 90;
      var angle = angleRaw < 0 ? angleRaw + 360 : angleRaw;

      _this.setState({
        angle: angle,
        rotateX: rotateX,
        rotateY: rotateY,
        scale: scale
      });
    };

    _this.state = initialState;
    return _this;
  }

  _createClass(ParallaxHover, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var shine = this.props.shine;

      this.setState({ shine: shine });
    }
  }, {
    key: 'buildTransformStrings',
    value: function buildTransformStrings() {
      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var _state = this.state,
          isHovered = _state.isHovered,
          rotateX = _state.rotateX,
          rotateY = _state.rotateY,
          scale = _state.scale;

      // const scaleModifier = isHovered ? scale * 10 : 1;

      var scaleModifier = isHovered ? 1 + scale / 100 : 1;
      var rotationXModifier = rotateX + depth;
      var rotationYModifier = rotateY + depth;

      return {
        // WebkitTransform: `translate3d(0,0,${scaleModifier}px) rotateX(${rotationXModifier}deg) rotateY(${rotationYModifier}deg)`,
        // MozTransform: `translate3d(0,0,${scaleModifier}px) rotateX(${rotationXModifier}deg) rotateY(${rotationYModifier}deg)`,
        // MsTransform: `translate3d(0,0,${scaleModifier}px) rotateX(${rotationXModifier}deg) rotateY(${rotationYModifier}deg)`,
        // OTransform: `translate3d(0,0,${scaleModifier}px) rotateX(${rotationXModifier}deg) rotateY(${rotationYModifier}deg)`,
        // transform: `translate3d(0,0,${scaleModifier}px) rotateX(${rotationXModifier}deg) rotateY(${rotationYModifier}deg)`,

        WebkitTransform: 'scale(' + scaleModifier + ') rotateX(' + rotationXModifier + 'deg) rotateY(' + rotationYModifier + 'deg)',
        MozTransform: 'scale(' + scaleModifier + ') rotateX(' + rotationXModifier + 'deg) rotateY(' + rotationYModifier + 'deg)',
        MsTransform: 'scale(' + scaleModifier + ') rotateX(' + rotationXModifier + 'deg) rotateY(' + rotationYModifier + 'deg)',
        OTransform: 'scale(' + scaleModifier + ') rotateX(' + rotationXModifier + 'deg) rotateY(' + rotationYModifier + 'deg)',
        transform: 'scale(' + scaleModifier + ') rotateX(' + rotationXModifier + 'deg) rotateY(' + rotationYModifier + 'deg)'
      };
    }
  }, {
    key: 'calculateDistance',
    value: function calculateDistance(bounds, offsetX, offsetY) {
      var distanceX = Math.pow(offsetX - bounds.width / 2, 2);
      var distanceY = Math.pow(offsetY - bounds.height / 2, 2);
      return Math.floor(Math.sqrt(distanceX + distanceY));
    }
  }, {
    key: 'calculateShineFromCenter',
    value: function calculateShineFromCenter(current) {
      var _props = this.props,
          width = _props.width,
          height = _props.height,
          shine = _props.shine;

      var max = Math.max(width, height);
      return current / max * shine;
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      var _props2 = this.props,
          borderRadius = _props2.borderRadius,
          children = _props2.children,
          height = _props2.height,
          width = _props2.width;


      var _styles = _extends({
        height: height + 'px',
        width: width + 'px',
        borderRadius: borderRadius + 'px'
      }, this.buildTransformStrings());

      if (!Array.isArray(children)) {
        return _react2.default.createElement(
          'div',
          {
            style: _styles,
            className: (0, _noImportant.css)(styles.parallaxHover__layer)
          },
          children
        );
      }

      return children.map(function (layer, key) {
        return _react2.default.createElement(
          'div',
          {
            style: _styles,
            className: (0, _noImportant.css)(styles.parallaxHover__layer),
            key: key
          },
          layer
        );
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state2 = this.state,
          angle = _state2.angle,
          isHovered = _state2.isHovered,
          shine = _state2.shine,
          rotateX = _state2.rotateX;
      var _props3 = this.props,
          borderRadius = _props3.borderRadius,
          shadow = _props3.shadow,
          width = _props3.width,
          height = _props3.height;


      var shadowAlphaModifier = shadow >= 10 ? 1 : '0.' + shadow;
      var shadowPositionModifier = isHovered ? rotateX + shadow * shadow / 2 : 0;
      var shadowBlurModifier = isHovered ? shadow * 12 : 0;

      // Styles that need to be recalculated on render or passed in from props
      var _styles = {
        overlay: {
          width: width + 'px',
          height: height + 'px'
        },

        // TODO Why the fuck isn't light shine displaying?!
        lighting: _extends({
          backgroundImage: 'linear-gradient(' + angle + 'deg, rgba(255,255,255, ' + shine / 10 + ') 0%, rgba(255,255,255,0) 50%)',
          borderRadius: borderRadius + 'px'
        }, this.buildTransformStrings()),

        // TODO Fix shadows not showing up when supplied a large border radius
        shadow: _extends({
          borderRadius: borderRadius + 'px',
          boxShadow: '0px ' + shadowPositionModifier + 'px ' + shadowBlurModifier + 'px rgba(0, 0, 0, ' + shadowAlphaModifier + ')'
        }, this.buildTransformStrings())
      };

      return _react2.default.createElement(
        'div',
        {
          className: (0, _noImportant.css)(styles.parallaxHover__outter),
          onMouseEnter: this.handleParallaxBegin,
          onMouseLeave: this.handleParallaxEnd,
          onMouseMove: this.handleParallaxMove,
          onTouchStart: this.handleParallaxBegin,
          onTouchMove: this.handleParallaxEnd,
          onTouchEnd: this.handleParallaxMove,
          style: _styles.overlay,
          ref: function ref(wrapper) {
            _this2.wrapper = wrapper;
          }
        },
        _react2.default.createElement('div', { className: (0, _noImportant.css)(styles.parallaxHover__shadow), style: _styles.shadow }),
        _react2.default.createElement(
          'div',
          { className: (0, _noImportant.css)(styles.parallaxHover__container) },
          this.renderLayers(),
          _react2.default.createElement('div', { className: (0, _noImportant.css)(styles.parallaxHover__lighting), style: _styles.lighting })
        )
      );
    }
  }]);

  return ParallaxHover;
}(_react.Component);

exports.default = ParallaxHover;


ParallaxHover.defaultProps = {
  speed: 100, // How fast the item scales up and down in MS
  scale: 6, // How large to scale the item
  rotation: 8, // Rotation modifier
  shadow: 5, // Shadow darkness modifier
  shine: 5, // Light shine brightness modifer
  height: 200, // Default height
  width: 200, // Default width
  borderRadius: 0 // Default border radius
};

ParallaxHover.propTypes = {
  children: _react.PropTypes.any,
  width: _react.PropTypes.number.isRequired,
  height: _react.PropTypes.number.isRequired,

  // Optional Proptypes
  shadow: _react.PropTypes.number,
  scale: _react.PropTypes.number,
  rotation: _react.PropTypes.number,
  shine: _react.PropTypes.number,
  borderRadius: _react.PropTypes.number
};
